body {
    font-family: 'PT Sans', sans-serif;
    padding: 1rem;
    color: white;
    margin: 0;
    padding: 0;
}

.background {
    position: fixed;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    z-index: -1;
}

.background img {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    min-width: 50%;
    min-height: 50%;
}

.bottom-right {
    position: absolute;
    bottom: 0;
    right: 0;
    margin: 1rem;
}

hr.divider {
    opacity: 0.3;
    margin: 1.25rem 1.5rem;
}

.sidebar {
    height: 100vh;
    width: 400px;
    background-color: rgba(0, 0, 0, 0.5);
    position: fixed;
    right: 0;
    transition: all 1s ease;
}

.name {
    text-align: center;
    font-size: 5em;
    margin: 3rem 0;
    line-height: 1;
}

.skills__title {
    text-align: center;
}

.skills {
    padding: 1rem;
    display: grid;
    grid-template: auto / repeat(3, 1fr);
    /* transform: translateZ(200px); */
}

.skills > span {
    text-align: center;
    margin: 0.5rem;
    transition: all 1s ease;
}

.skills > span:hover {
    transform: scale(1.3);
    cursor: default;
}

.conventions {
    padding: 1rem;
    display: grid;
    grid-template: auto / repeat(3, 1fr);
    /* transform-origin: left; */
    /* transform: rotateY(-90deg); */
}

.conventions > span {
    text-align: center;
    margin: 0.5rem;
}

.low {
    color: rgb(0, 192, 0);
}

.medium {
    color: rgba(255, 255, 0, 1);
}

.high {
    color: rgb(255, 35, 35);
}

.header {
    position: relative;
}

@media (max-width: 650px) {
    .header {
        padding: 0 5rem;
    }

    .sidebar {
        width: 100%;
    }
}

.cursor {
    position: absolute;
    animation: 0.8s linear 0s infinite alternate blinking, 1s linear forwards 2s moveX;
    width: 2rem;
    height: 1rem;
    background-color: lightgray;
    bottom: 0;
}

@keyframes blinking {
    0% {
        opacity: 0;
    }
    49% {
        opacity: 0;
    }
    51% {
        opacity: 1;
    }
    100% {
        opacity: 1;
    }
}

@keyframes moveX {
    from {
        transform: translateX(2em)
    }
    to {
        transform: translateX(2em)
    }
}